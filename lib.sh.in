set -e
base=$(dirname "$(readlink -f "$0")")

SCMAKE=${SCMAKE:-_PREFIX_/lib/scmake}

prefix=${prefix:-_DEFAULT_PREFIX_}
cflags="$CFLAGS"
ldflags="$LDFLAGS"
[ -z "$CC" ] && CC=$(which cc)
[ -z "$CPP" ] && CPP=$(which cpp)
[ -z "$CXX" ] && CXX=$(which c++)
[ -z "$LD" ] && LD=$(which ld)
[ -z "$AR" ] && AR=$(which ar)
cc="-D__CC__=$CC"
cxx="-D__CXX__=$CXX"
cpp="-D__CPP__=$CPP"
ld="-D__LD__=$LD"
ar="-D__AR__=$AR"

showhelp() {
    cat <<EOF
USAGE
    $ $0 [options...]
    $ make
    # sudo make install

OPTIONS
    --prefix=[$prefix]
        Sets the installation prefix.
EOF
}

parsearg() {
    case "$1" in
        -k) printf "%s" "$2" | cut -d= -f1 ;;
        -v) printf "%s" "$2" | cut -d= -f2 ;;
        *) break ;;
    esac
}

opterror() {
    echo "Error: Unknown option $1"
    exit 1
}

add() {
    val=$(echo "$2" | xargs)
    eval "$1=\"\${$1}$val \""
}

setstr() {
    eval "$1=\"-D$2=$(eval "echo \$$1")\""
}

setbool() {
    value=$(eval "echo \$$1")
    if [ "$2" ]
    then
        // Configure macro
        [ "$value" == "yes" ] && $1="-D$2"
    fi
    if [ "$value" != "yes" ]
    then
        eval "$1="
    fi
}

setdefaults() {
    setstr prefix __PREFIX__
    setstr cflags __CFLAGS__
    setstr ldflags __LDFLAGS__
}

dependency() {
    dep=$1
    shift
    pkg-config $dep || {
        echo "Missing dependency $dep"
        exit 1
    }
    _cflags=$(pkg-config --cflags $dep $*)
    _ldflags=$(pkg-config --libs $dep $*)
    add cflags "$_cflags"
    add ldflags "$_ldflags"
}

gen() {
    $CPP -P -nostdinc -traditional-cpp \
        "$SCMAKE/config.mk.in" -o config.mk \
        "-D__BASE__=$base" \
        $cflags $ldflags $cc $cpp $ld $ar $prefix "$@"
    $CPP -P -nostdinc -traditional-cpp -I. \
        "$base/Makefile.in" -o Makefile \
        "-D__BASEDIR__=$base" \
        $cflags $ldflags $cc $cpp $ld $ar $prefix "$@"
    printf "%s\n\n" "# File generated by $0, edit $(dirname "$0")/Makefile.in instead" \
        | cat - Makefile > Makefile.final
    mv Makefile.final Makefile
}
